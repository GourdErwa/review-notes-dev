(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{218:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("blockquote",[n("p",[e._v("专栏原创出处："),n("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/framework/flink-basis",target:"_blank",rel:"noopener noreferrer"}},[e._v("源笔记文件"),n("OutboundLink")],1),e._v(" ，"),n("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced",target:"_blank",rel:"noopener noreferrer"}},[e._v("源码"),n("OutboundLink")],1)])]),e._v(" "),n("h1",{attrs:{id:"参数传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数传递"}},[e._v("#")]),e._v(" 参数传递")]),e._v(" "),n("p",[e._v("实际开发过程中我们需要在整个任务运行过程中传递自定义参数 。本节内容对应"),n("a",{attrs:{href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/batch/#passing-parameters-to-functions",target:"_blank",rel:"noopener noreferrer"}},[e._v("官方文档"),n("OutboundLink")],1),e._v("，本节内容对应"),n("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/batch/Parameters.scala",target:"_blank",rel:"noopener noreferrer"}},[e._v("示例源码"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("Dataset定义：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("trait Parameters extends MainApp {\n  val env = ExecutionEnvironment.getExecutionEnvironment\n  val toFilter = env.fromElements(1, 2, 3)\n}\n")])])]),n("p",[n("strong",[e._v("构造函数传递")]),e._v("\n示例代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("object UseConstructor extends Parameters {\n\n  toFilter\n    .filter(_ > 2) // 2 可以由构造函数传递\n    .print()\n\n}\n")])])]),n("p",[n("strong",[e._v("RichFunction函数传递")]),n("br"),e._v("\n自定义参数调用"),n("code",[e._v("withParameters")]),e._v("方法传递给 [[org.apache.flink.api.common.functions.RichFunction]]\n示例代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('object UseWithParameters extends Parameters {\n\n  val c = new Configuration()\n  c.setInteger("limit", 2)\n\n  toFilter.filter(new RichFilterFunction[Int]() {\n    var limit = 0\n\n    override def open(config: Configuration): Unit = {\n      limit = config.getInteger("limit", 0)\n    }\n\n    def filter(in: Int): Boolean = in > limit\n  }).withParameters(c) // 自定义参数传递给 UdfOperator&DataSource\n    .print()\n}\n')])])]),n("p",[n("strong",[e._v("全局参数传递")]),e._v("\n自定义参数调用"),n("code",[e._v("setGlobalJobParameters")]),e._v("方法在执行配置中注册\n示例代码：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('object UseGlobally extends Parameters {\n  val conf = new Configuration()\n  conf.setInteger("limit", 2)\n  env.getConfig.setGlobalJobParameters(conf) // 设置全局参数\n\n  toFilter.filter(new RichFilterFunction[Int]() {\n    var limit = 0\n\n    override def open(config: Configuration): Unit = {\n      val globalParams = getRuntimeContext.getExecutionConfig.getGlobalJobParameters\n\n      // 从全局参数中获取对应值\n      limit = globalParams.asInstanceOf[Configuration].getInteger("limit", limit)\n    }\n\n    def filter(in: Int): Boolean = in > limit\n  })\n    .print()\n}\n')])])])])}),[],!1,null,null,null);t.default=r.exports}}]);