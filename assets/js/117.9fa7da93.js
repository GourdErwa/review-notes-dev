(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{324:function(a,t,_){"use strict";_.r(t);var v=_(0),r=Object(v.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("blockquote",[_("p",[a._v("专栏原创出处："),_("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[a._v("github-源笔记文件 "),_("OutboundLink")],1),a._v(" ，"),_("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[a._v("github-源码 "),_("OutboundLink")],1),a._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),a._v(" "),_("p",[a._v("Java JVM-虚拟机专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),_("a",{attrs:{href:"https://review-notes.top/language/java-jvm/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java JVM-虚拟机 "),_("OutboundLink")],1)]),a._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#_1-简介"}},[a._v("1 简介")])]),_("li",[_("a",{attrs:{href:"#_2-对象在虚拟机的创建过程"}},[a._v("2 对象在虚拟机的创建过程")]),_("ul",[_("li",[_("a",{attrs:{href:"#_2-1-创建过程-类加载"}},[a._v("2.1 创建过程-类加载")])]),_("li",[_("a",{attrs:{href:"#_2-2-创建过程-内存分配"}},[a._v("2.2 创建过程-内存分配")])]),_("li",[_("a",{attrs:{href:"#_2-3-创建过程-内存空间初始化"}},[a._v("2.3 创建过程-内存空间初始化")])]),_("li",[_("a",{attrs:{href:"#_2-4-创建过程-对象头设置"}},[a._v("2.4 创建过程-对象头设置")])]),_("li",[_("a",{attrs:{href:"#_2-5-创建过程-虚拟机创建对象完成"}},[a._v("2.5 创建过程-虚拟机创建对象完成")])])])]),_("li",[_("a",{attrs:{href:"#_3-对象的内存布局"}},[a._v("3 对象的内存布局")]),_("ul",[_("li",[_("a",{attrs:{href:"#_3-1-对象头"}},[a._v("3.1 对象头")])]),_("li",[_("a",{attrs:{href:"#_3-2-实例数据"}},[a._v("3.2 实例数据")])]),_("li",[_("a",{attrs:{href:"#_3-3-对齐填充"}},[a._v("3.3 对齐填充")])])])]),_("li",[_("a",{attrs:{href:"#_4-对象的访问方式"}},[a._v("4 对象的访问方式")])]),_("li",[_("a",{attrs:{href:"#参考"}},[a._v("参考")])])])]),_("p"),a._v(" "),_("h2",{attrs:{id:"_1-简介"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介"}},[a._v("#")]),a._v(" 1 简介")]),a._v(" "),_("p",[a._v("以最常用的虚拟机 HotSpot 和最常用的内存区域 Java 堆为例，深入探讨一下 HotSpot 虚拟机在 Java 堆中对象分配、布局和访问的全过程。")]),a._v(" "),_("h2",{attrs:{id:"_2-对象在虚拟机的创建过程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象在虚拟机的创建过程"}},[a._v("#")]),a._v(" 2 对象在虚拟机的创建过程")]),a._v(" "),_("p",[a._v("当 Java 虚拟机遇到一条字节码 new 指令时。")]),a._v(" "),_("h3",{attrs:{id:"_2-1-创建过程-类加载"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-创建过程-类加载"}},[a._v("#")]),a._v(" 2.1 创建过程-类加载")]),a._v(" "),_("p",[a._v("首先去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。")]),a._v(" "),_("h3",{attrs:{id:"_2-2-创建过程-内存分配"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-创建过程-内存分配"}},[a._v("#")]),a._v(" 2.2 创建过程-内存分配")]),a._v(" "),_("p",[a._v("在类加载检查通过后，接下来虚拟机将为新生对象分配内存，对象所需的内存大小在类加载完成后可完全确定。为对象分配空间的任务实际上便等同于把一块确定大小的内存块从 Java 堆中划分出来。")]),a._v(" "),_("p",[_("br"),a._v("\n内存分配方式「指针碰撞」与「空闲列表」介绍：")]),a._v(" "),_("ul",[_("li",[a._v("如果 Java 堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为「指针碰撞」。")]),a._v(" "),_("li",[a._v("如果 Java 堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为「空闲列表」。")])]),a._v(" "),_("p",[_("br"),a._v("\n选择哪种分配方式由 Java 堆是否规整决定，而 Java 堆是否规整又由所采用的垃圾收集器是否带有空间压缩整理的能力决定。因此：")]),a._v(" "),_("ul",[_("li",[a._v("当使用 Serial、ParNew 等带压缩整理过程的收集器时，系统采用的分配算法是指针碰撞，既简单又高效；")]),a._v(" "),_("li",[a._v("当使用 CMS 这种基于清除（Sweep）算法的收集器时，理论上就只能采用较为复杂的空闲列表来分配内存。")])]),a._v(" "),_("p",[_("br"),a._v("\n并发分配的问题及解决方案：")]),a._v(" "),_("p",[a._v("对象创建在虚拟机中是非常频繁的行为，即使仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象 A 分配内存，指针还没来得及修改，对象 B 又同时使用了原来的指针来分配内存的情况。解决这个问题有两种可选方案：")]),a._v(" "),_("ul",[_("li",[a._v("一种是对分配内存空间的动作进行同步处理，实际上虚拟机是采用 CAS 配上失败重试的方式保证更新操作的原子性；")]),a._v(" "),_("li",[a._v("一种是把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB），哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，分配新的缓存区时才需要同步锁定。")])]),a._v(" "),_("blockquote",[_("p",[a._v("虚拟机是否使用 TLAB，可以通过-XX：+/-UseTLAB 参数来设定。")])]),a._v(" "),_("h3",{attrs:{id:"_2-3-创建过程-内存空间初始化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-创建过程-内存空间初始化"}},[a._v("#")]),a._v(" 2.3 创建过程-内存空间初始化")]),a._v(" "),_("p",[a._v("内存分配完成之后，虚拟机必须将分配到的内存空间（但不包括对象头）都初始化为零值。\n这步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使用，使程序能访问到这些字段的数据类型所对应的零值。")]),a._v(" "),_("blockquote",[_("p",[a._v("如果使用了 TLAB 的话，这一项工作也可以提前至 TLAB 分配时进行。")])]),a._v(" "),_("h3",{attrs:{id:"_2-4-创建过程-对象头设置"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-创建过程-对象头设置"}},[a._v("#")]),a._v(" 2.4 创建过程-对象头设置")]),a._v(" "),_("p",[a._v("内存空间初始化后，Java 虚拟机还要对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（实际上对象的哈希码会延后到真正调用 Object.hashCode() 方法时才计算）、对象的 GC 分代年龄等信息。\n这些信息存放在对象的对象头之中。")]),a._v(" "),_("p",[a._v("根据虚拟机当前运行状态的不同，如是否启用偏向锁等，对象头会有不同的设置方式。")]),a._v(" "),_("h3",{attrs:{id:"_2-5-创建过程-虚拟机创建对象完成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-创建过程-虚拟机创建对象完成"}},[a._v("#")]),a._v(" 2.5 创建过程-虚拟机创建对象完成")]),a._v(" "),_("p",[a._v("在上面工作都完成之后，从虚拟机的视角来看，一个新的对象已经产生了。")]),a._v(" "),_("p",[a._v("但是从 Java 程序的视角看来，对象创建才刚刚开始，构造函数还没有执行，所有的字段都为默认的零值，对象需要的其他资源和状态信息也没有构造好。通过 new 指令创建的对象此时会执行构造方法。")]),a._v(" "),_("blockquote",[_("p",[a._v("通过其他方式创建的对象此时不一定执行构造方法，比如克隆对象。")])]),a._v(" "),_("h2",{attrs:{id:"_3-对象的内存布局"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象的内存布局"}},[a._v("#")]),a._v(" 3 对象的内存布局")]),a._v(" "),_("p",[a._v("在 HotSpot 虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：")]),a._v(" "),_("ul",[_("li",[a._v("对象头（Header）")]),a._v(" "),_("li",[a._v("实例数据（Instance Data）")]),a._v(" "),_("li",[a._v("对齐填充（Padding）")])]),a._v(" "),_("h3",{attrs:{id:"_3-1-对象头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-对象头"}},[a._v("#")]),a._v(" 3.1 对象头")]),a._v(" "),_("p",[a._v("HotSpot 虚拟机对象的对象头部分包括两类信息")]),a._v(" "),_("ul",[_("li",[a._v("Mark Word（存储对象自身的运行时数据）")]),a._v(" "),_("li",[a._v("类型指针")])]),a._v(" "),_("h4",{attrs:{id:"对象头信息-mark-word"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象头信息-mark-word"}},[a._v("#")]),a._v(" 对象头信息-Mark Word")]),a._v(" "),_("p",[a._v("「Mark Word」是用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁、偏向线程 ID、偏向时间戳等，这部分数据的长度在 32 位和 64 位的虚拟机（未开启压缩指针）中分别为 32 个比特和 64 个比特。")]),a._v(" "),_("p",[a._v("对象需要存储的运行时数据很多，其实已经超出了 32、64 位 Bitmap 结构所能记录的最大限度，但对象头里的信息是与对象自身定义的数据无关的额外存储成本，\n考虑到虚拟机的空间效率，Mark Word 被设计成一个有着动态定义的数据结构，以便在极小的空间内存储尽量多的数据，根据对象的状态复用自己的存储空间。")]),a._v(" "),_("h4",{attrs:{id:"对象头信息-类型指针"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对象头信息-类型指针"}},[a._v("#")]),a._v(" 对象头信息-类型指针")]),a._v(" "),_("p",[a._v("对象头类型指针对象是指向它的类型元数据的指针，Java 虚拟机通过这个指针来确定该对象是哪个类的实例。")]),a._v(" "),_("p",[a._v("不是所有的虚拟机实现都必须在对象数据上保留类型指针，换句话说，查找对象的元数据信息并不一定要经过对象本身，TODO -------这点我们会在下一节具体讨论。")]),a._v(" "),_("p",[a._v("此外，如果对象是一个 Java 数组，那在对象头中还必须有一块用于记录数组长度的数据，因为虚拟机可以通过普通 Java 对象的元数据信息确定 Java 对象的大小，但是如果数组的长度是不确定的，将无法通过元数据中的信息推断出数组的大小。")]),a._v(" "),_("h3",{attrs:{id:"_3-2-实例数据"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-实例数据"}},[a._v("#")]),a._v(" 3.2 实例数据")]),a._v(" "),_("p",[a._v("实例数据部分是对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。")]),a._v(" "),_("p",[a._v("这部分的存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle 参数）和字段在 Java 源码中定义顺序的影响。")]),a._v(" "),_("p",[a._v("HotSpot 虚拟机默认的分配顺序为 longs/doubles、ints、shorts/chars、bytes/booleans、oops（普通对象指针），\n从以上默认的分配策略中可以看到，相同宽度的字段总是被分配到一起存放，在满足这个前提条件的情况下，在父类中定义的变量会出现在子类之前。")]),a._v(" "),_("p",[a._v("如果 HotSpot 虚拟机的 "),_("code",[a._v("+XX：CompactFields")]),a._v(" 参数值为 true（默认为 true），那子类之中较窄的变量也允许插入父类变量的空隙之中，以节省出一点点空间。")]),a._v(" "),_("h3",{attrs:{id:"_3-3-对齐填充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-对齐填充"}},[a._v("#")]),a._v(" 3.3 对齐填充")]),a._v(" "),_("p",[a._v("对齐填充没有特别的含义，它仅仅起着占位符的作用。")]),a._v(" "),_("p",[a._v("由于 HotSpot 虚拟机的自动内存管理系统要求对象起始地址必须是 8 字节的整数倍。对象头部分已经被精心设计成正好是 8 字节的倍数（1 倍或者 2 倍），因此，如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。")]),a._v(" "),_("h2",{attrs:{id:"_4-对象的访问方式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_4-对象的访问方式"}},[a._v("#")]),a._v(" 4 对象的访问方式")]),a._v(" "),_("p",[a._v("reference 类型在《Java 虚拟机规范》里面只规定了它是一个指向对象的引用，并没有定义这个引用应该通过什么方式去定位、访问到堆中对象的具体位置，所以对象访问方式也是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种")]),a._v(" "),_("ul",[_("li",[a._v("如果使用句柄访问的话，Java 堆中将可能会划分出一块内存来作为句柄池，reference 中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示。")]),a._v(" "),_("li",[a._v("如果使用直接指针访问的话，Java 堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference 中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示。")])]),a._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-jvm/_images/对象访问方式.jpeg"}})]),a._v(" "),_("p",[a._v("访问方式比较：")]),a._v(" "),_("ul",[_("li",[a._v("句柄来访问的最大好处就是 reference 中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而 reference 本身不需要被修改。")]),a._v(" "),_("li",[a._v("直接指针来访问最大的好处就是速度更快，它节省了一次指针定位的时间开销，由于对象访问在 Java 中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，")])]),a._v(" "),_("blockquote",[_("p",[a._v("HotSpot 虚拟机主要使用第二种方式，有例外情况，如果使用 Shenandoah 收集器的话也会有一次额外的转发，具体可参见收集器章节")])]),a._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),_("ul",[_("li",[a._v("《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第 3 版）》周志明 著")])])])}),[],!1,null,null,null);t.default=r.exports}}]);