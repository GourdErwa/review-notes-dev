(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{247:function(t,s,a){"use strict";a.r(s);var e=a(12),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("专栏原创出处："),a("a",{attrs:{href:"https://github.com/GourdErwa/review-notes",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),a("OutboundLink")],1),t._v(" ，"),a("a",{attrs:{href:"https://github.com/GourdErwa/leetcode",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),a("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-树的概念"}},[t._v("1. 树的概念")])]),a("li",[a("a",{attrs:{href:"#_2-二叉树"}},[t._v("2. 二叉树")]),a("ul",[a("li",[a("a",{attrs:{href:"#_2-1-二叉树的遍历"}},[t._v("2.1 二叉树的遍历")])]),a("li",[a("a",{attrs:{href:"#_2-2-二叉树的类型"}},[t._v("2.2 二叉树的类型")])]),a("li",[a("a",{attrs:{href:"#_2-3-二叉树相关算法"}},[t._v("2.3 二叉树相关算法")])])])]),a("li",[a("a",{attrs:{href:"#_3-二叉查找树"}},[t._v("3. 二叉查找树")]),a("ul",[a("li",[a("a",{attrs:{href:"#_3-1-二叉查找树操作"}},[t._v("3.1 二叉查找树操作")])]),a("li",[a("a",{attrs:{href:"#_3-2-二叉查找树相关算法"}},[t._v("3.2 二叉查找树相关算法")])])])]),a("li",[a("a",{attrs:{href:"#_4-平衡二叉查找树"}},[t._v("4. 平衡二叉查找树")]),a("ul",[a("li",[a("a",{attrs:{href:"#_4-1-为什么需要用到平衡二叉查找树"}},[t._v("4.1 为什么需要用到平衡二叉查找树?")])]),a("li",[a("a",{attrs:{href:"#_4-2-实际应用"}},[t._v("4.2 实际应用")])])])]),a("li",[a("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"_1-树的概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-树的概念"}},[t._v("#")]),t._v(" 1. 树的概念")]),t._v(" "),a("p",[t._v("具有 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")]),a("mo",[t._v("(")]),a("mi",[t._v("n")]),a("mo",[t._v("≥")]),a("mn",[t._v("0")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n(n\\ge 0)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mrel"},[t._v("≥")]),a("span",{staticClass:"mord mathrm"},[t._v("0")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 个节点的有限集称为树。")]),t._v(" "),a("p",[t._v("当 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")]),a("mo",[t._v("=")]),a("mn",[t._v("0")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n = 0")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.64444em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mrel"},[t._v("=")]),a("span",{staticClass:"mord mathrm"},[t._v("0")])])])]),t._v(" 时称为空树；")]),t._v(" "),a("p",[t._v("当 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("n")]),a("mo",[t._v("≥")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n\\ge 1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.64444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.78041em","vertical-align":"-0.13597em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mrel"},[t._v("≥")]),a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v(" 时，仅有一个特定的称为根的结点，其余结点可分为 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("m")]),a("mo",[t._v("(")]),a("mi",[t._v("m")]),a("mo",[t._v("≥")]),a("mn",[t._v("0")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("m(m\\ge 0)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("m")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit"},[t._v("m")]),a("span",{staticClass:"mrel"},[t._v("≥")]),a("span",{staticClass:"mord mathrm"},[t._v("0")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 个互不相交的有限集。每一个集合本身又是一棵树，称为根的子树。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91.jpg",height:"250px"}})]),t._v(" "),a("p",[t._v('特点：树是非线性结构，数据元素具有"一对多"的逻辑关系；树中的每个元素最多有一个前驱结点，有多个后继结点。')]),t._v(" "),a("p",[t._v("树结构中的常见用语:")]),t._v(" "),a("ul",[a("li",[t._v("节点的深度 - 从树的根节点到该节点的边数")]),t._v(" "),a("li",[t._v("节点的高度 - 该节点和叶子之间最长路径上的边数")]),t._v(" "),a("li",[t._v("树的高度 - 其根节点的高度")])]),t._v(" "),a("h2",{attrs:{id:"_2-二叉树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-二叉树"}},[t._v("#")]),t._v(" 2. 二叉树")]),t._v(" "),a("p",[t._v("二叉树是一种更为典型的树树状结构。如它名字所描述的那样，二叉树是每个节点最多有两个子树的树结构，通常子树被称作“左子树”和“右子树”。\n")]),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91.jpg",height:"400px"}})]),a("p"),t._v(" "),a("h3",{attrs:{id:"_2-1-二叉树的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-二叉树的遍历"}},[t._v("#")]),t._v(" 2.1 二叉树的遍历")]),t._v(" "),a("ul",[a("li",[t._v("前序遍历：首先访问根节点，然后遍历左子树，最后遍历右子树。")]),t._v(" "),a("li",[t._v("中序遍历：先遍历左子树，然后访问根节点，然后遍历右子树。")]),t._v(" "),a("li",[t._v("后序遍历：先遍历左子树，然后遍历右子树，最后访问树的根节点。")]),t._v(" "),a("li",[t._v("层级遍历：逐层遍历，二叉树的最大深度也就是层级树。")])]),t._v(" "),a("p",[t._v("对于上述三种遍历，我们简化为，前中后只是表明遍历时「根节点的位置」，不管根在哪儿都是从左向右。每次遍历到节点时把它看做时一棵新树按刚刚的方式继续遍历。")]),t._v(" "),a("p",[t._v("我们可以简化为一个不需要记忆的方法：")]),t._v(" "),a("ul",[a("li",[t._v("前序遍历："),a("strong",[t._v("根")]),t._v(" 左 右")]),t._v(" "),a("li",[t._v("中序遍历：左 "),a("strong",[t._v("根")]),t._v(" 右")]),t._v(" "),a("li",[t._v("后序遍历：左 右 "),a("strong",[t._v("根")])])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91%E9%81%8D%E5%8E%86.jpg",height:"300px"}})]),t._v(" "),a("p",[a("strong",[t._v("1. 二叉树的关系")]),t._v("：")]),t._v(" "),a("ul",[a("li",[t._v("中序遍历不能唯一确定一棵二叉搜索树；")]),t._v(" "),a("li",[t._v("先序和后序遍历不能唯一确定一棵二叉搜索树；")]),t._v(" "),a("li",[t._v("中序后序可以唯一确定一棵二叉树；")]),t._v(" "),a("li",[t._v("中序先序可以唯一确定一棵二叉树。")])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("根据「中序后序」「中序先序」构造二叉树步骤")]),t._v("：")])]),t._v(" "),a("ul",[a("li",[t._v("通常从先序序列或者后序序列开始，根据不同遍历方法的规律，选择合适的节点构造树；")]),t._v(" "),a("li",[t._v("例如：先序序列的"),a("strong",[t._v("第一个节点")]),t._v("是根节点，然后是它的左孩子，右孩子等等。后序序列的最"),a("strong",[t._v("后一个节点")]),t._v("是根节点，然后是它的右孩子，左孩子等等；")]),t._v(" "),a("li",[t._v("从先序/后序序列中找到根节点，根据根节点"),a("strong",[t._v("将中序序列分为左子树和右子树")]),t._v("；")]),t._v(" "),a("li",[t._v("从中序序列中获得的信息是：如果当前子树为空（返回 None），否则继续构造子树。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/constructfrompostin.png"}})]),t._v(" "),a("p",[a("strong",[t._v("3. 常见算法题")]),t._v("：")]),t._v(" "),a("p",[t._v("前序遍历、中序遍历、后序遍历、层级遍历、计算二叉树的最大深度。")]),t._v(" "),a("p",[t._v("从前序与中序遍历序列构造二叉树、从中序与后序遍历序列构造二叉树、二叉树的最近公共祖先")]),t._v(" "),a("h3",{attrs:{id:"_2-2-二叉树的类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-二叉树的类型"}},[t._v("#")]),t._v(" 2.2 二叉树的类型")]),t._v(" "),a("p",[t._v("完美二叉树：又叫满二叉树，除叶子节点所有子节点都有左右子节点。")]),t._v(" "),a("p",[t._v("完全二叉树：除叶子节点所有子节点都有左右子节点。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%AE%8C%E5%85%A8%E5%92%8C%E5%AE%8C%E7%BE%8E.jpg",height:"500px"}})]),t._v(" "),a("h3",{attrs:{id:"_2-3-二叉树相关算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-二叉树相关算法"}},[t._v("#")]),t._v(" 2.3 二叉树相关算法")]),t._v(" "),a("p",[t._v("推荐 "),a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣-卡片-二叉树 "),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_3-二叉查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-二叉查找树"}},[t._v("#")]),t._v(" 3. 二叉查找树")]),t._v(" "),a("p",[t._v("二叉查找树（BST）是二叉树的一种特殊表示形式（也叫二叉查找树），它满足如下特性：")]),t._v(" "),a("ol",[a("li",[t._v("每个节点中的值必须大于等于存储在其左子树中的任何值。")]),t._v(" "),a("li",[t._v("每个节点中的值必须小于等于存储在其右子树中的任何值。")])]),t._v(" "),a("p",[t._v("像普通的二叉树一样，我们可以按照前序、中序和后序来遍历一个二叉查找树。但是，对于二叉查找树，我们可以通过中序遍历得到一个「递增的有序序列」。因此，中序遍历是二叉查找树中最常用的遍历方法。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.jpg",height:"400px"}})]),t._v(" "),a("p",[t._v("上述图中是一个二叉查找树，中序遍历结果为 "),a("code",[t._v("1 2 4 6 8 10 ... 30 32 34 36")])]),t._v(" "),a("h3",{attrs:{id:"_3-1-二叉查找树操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-二叉查找树操作"}},[t._v("#")]),t._v(" 3.1 二叉查找树操作")]),t._v(" "),a("p",[a("strong",[t._v("搜索操作：")])]),t._v(" "),a("ol",[a("li",[t._v("如果目标值等于节点的值，则返回节点;")]),t._v(" "),a("li",[t._v("如果目标值小于节点的值，则继续在左子树中搜索;")]),t._v(" "),a("li",[t._v("如果目标值大于节点的值，则继续在右子树中搜索。")])]),t._v(" "),a("p",[a("strong",[t._v("插入操作：")])]),t._v(" "),a("p",[t._v("与搜索操作类似，对于每个节点，我们将：")]),t._v(" "),a("ol",[a("li",[t._v("根据节点值与目标节点值的关系，搜索左子树或右子树；")]),t._v(" "),a("li",[t._v("重复步骤 1 直到到达外部节点；")]),t._v(" "),a("li",[t._v("根据节点的值与目标节点的值的关系，将新节点添加为其左侧或右侧的子节点。")])]),t._v(" "),a("p",[a("strong",[t._v("删除操作：")])]),t._v(" "),a("ol",[a("li",[t._v("如果目标节点没有子节点，我们可以直接移除该目标节点。")]),t._v(" "),a("li",[t._v("如果目标节只有一个子节点，我们可以用其子节点作为替换。")]),t._v(" "),a("li",[t._v("如果目标节点有两个子节点，我们需要用其中序后继节点或者前驱节点来替换，再删除该目标节点。")])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91-%E5%88%A0%E9%99%A4.jpg",height:"400px"}})]),t._v(" "),a("h3",{attrs:{id:"_3-2-二叉查找树相关算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-二叉查找树相关算法"}},[t._v("#")]),t._v(" 3.2 二叉查找树相关算法")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/explore/learn/card/introduction-to-data-structure-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣-卡片-二叉查找树 "),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"_4-平衡二叉查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-平衡二叉查找树"}},[t._v("#")]),t._v(" 4. 平衡二叉查找树")]),t._v(" "),a("p",[t._v("平衡二叉查找树：是一种结构平衡的二叉查找树，即叶节点高度差的绝对值不超过 1，并且左右两个子树都是一棵平衡二叉树。")]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91.jpg",height:"350px"}})]),t._v(" "),a("blockquote",[a("p",[t._v("从上图可以分析如果我们计算一颗树是否是高度平衡时，自上而下的计算会重复计算子节点，如果我们自下而上计算并比较当前节点高度可以避免该问题。")])]),t._v(" "),a("p",[t._v("有 N 个节点的平衡二叉查找树，它的高度是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("mi",[t._v("g")]),a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("logN")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("为什么是 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("mi",[t._v("g")]),a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("logN")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.03588em"}},[t._v("g")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v(" 呢?")]),t._v(" "),a("ul",[a("li",[t._v("一个高度为 h 的二叉树： "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("msup",[a("mn",[t._v("2")]),a("mn",[t._v("0")])],1),a("mo",[t._v("+")]),a("msup",[a("mn",[t._v("2")]),a("mn",[t._v("1")])],1),a("mo",[t._v("+")]),a("mo",[t._v("⋯")]),a("mo",[t._v("+")]),a("msup",[a("mn",[t._v("2")]),a("mi",[t._v("h")])],1),a("mo",[t._v("=")]),a("msup",[a("mn",[t._v("2")]),a("mrow",[a("mi",[t._v("h")]),a("mo",[t._v("+")]),a("mn",[t._v("1")])],1)],1),a("mo",[t._v("−")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("2^0+2^1+\\cdots+2^h = 2^{h+1} -1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.849108em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.932438em","vertical-align":"-0.08333em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("0")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord mathrm"},[t._v("1")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"minner"},[t._v("⋯")]),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("h")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mrel"},[t._v("=")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("h")]),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mord mathrm"},[t._v("1")])])])])]),t._v(" "),a("li",[t._v("一个有 N 个节点，且高度为 h 的二叉树： "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("N")]),a("mo",[t._v("≤")]),a("msup",[a("mn",[t._v("2")]),a("mrow",[a("mi",[t._v("h")]),a("mo",[t._v("+")]),a("mn",[t._v("1")])],1)],1),a("mo",[t._v("−")]),a("mn",[t._v("1")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N \\leq 2^{h+1} -1")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.849108em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.985078em","vertical-align":"-0.13597em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")]),a("span",{staticClass:"mrel"},[t._v("≤")]),a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathrm"},[t._v("2")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"-0.363em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle uncramped"},[a("span",{staticClass:"mord scriptstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("h")]),a("span",{staticClass:"mbin"},[t._v("+")]),a("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mbin"},[t._v("−")]),a("span",{staticClass:"mord mathrm"},[t._v("1")])])])])]),t._v(" "),a("li",[t._v("所以："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("h")]),a("mo",[t._v("≥")]),a("mi",{attrs:{mathvariant:"normal"}},[t._v("∣")]),a("msub",[a("mi",[t._v("log")]),a("mn",[t._v("2")])],1),a("mrow",[a("mi",[t._v("N")])],1),a("mi",{attrs:{mathvariant:"normal"}},[t._v("∣")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("h\\geq|\\log_2{N}|")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("h")]),a("span",{staticClass:"mrel"},[t._v("≥")]),a("span",{staticClass:"mord mathrm"},[t._v("∣")]),a("span",{staticClass:"mop"},[a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"0.24444em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle cramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mord textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])]),a("span",{staticClass:"mord mathrm"},[t._v("∣")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"_4-1-为什么需要用到平衡二叉查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-为什么需要用到平衡二叉查找树"}},[t._v("#")]),t._v(" 4.1 为什么需要用到平衡二叉查找树?")]),t._v(" "),a("p",[t._v("以搜索操作为例，如果二叉查找树的高度为 h，则时间复杂度为 O(h)。二叉查找树的高度的确很重要。")]),t._v(" "),a("p",[t._v("通过上文可知 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("h")]),a("mo",[t._v("≥")]),a("mi",{attrs:{mathvariant:"normal"}},[t._v("∣")]),a("msub",[a("mi",[t._v("log")]),a("mn",[t._v("2")])],1),a("mrow",[a("mi",[t._v("N")])],1),a("mi",{attrs:{mathvariant:"normal"}},[t._v("∣")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("h\\geq|\\log_2{N}|")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit"},[t._v("h")]),a("span",{staticClass:"mrel"},[t._v("≥")]),a("span",{staticClass:"mord mathrm"},[t._v("∣")]),a("span",{staticClass:"mop"},[a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"0.24444em","margin-right":"0.05em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle cramped"},[a("span",{staticClass:"mord mathrm"},[t._v("2")])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])]),a("span",{staticClass:"mord textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])]),a("span",{staticClass:"mord mathrm"},[t._v("∣")])])])]),t._v("，所以具有"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v("个节点的二叉查找树的高度在 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("log")]),a("mrow",[a("mi",[t._v("N")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\log{N}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"mord textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])])]),t._v(" 到 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v(" 区间变化。也就是说，搜索操作的时间复杂度可以从 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("log")]),a("mrow",[a("mi",[t._v("N")])],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("\\log{N}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.69444em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.8888799999999999em","vertical-align":"-0.19444em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mop"},[t._v("lo"),a("span",{staticStyle:{"margin-right":"0.01389em"}},[t._v("g")])]),a("span",{staticClass:"mord textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])])]),t._v(" 变化到 "),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("N")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("N")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.68333em","vertical-align":"0em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("N")])])])]),t._v("。这是一个巨大的性能差异。\n所以说，高度平衡的二叉查找树对提高性能起着重要作用。")]),t._v(" "),a("p",[t._v("常见的平衡二叉查找树有：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/AVL%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("AVL 树 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("红黑树 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/Treap",target:"_blank",rel:"noopener noreferrer"}},[t._v("树堆 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://baike.baidu.com/item/%E4%BC%B8%E5%B1%95%E6%A0%91",target:"_blank",rel:"noopener noreferrer"}},[t._v("伸展树 "),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"_4-2-实际应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-实际应用"}},[t._v("#")]),t._v(" 4.2 实际应用")]),t._v(" "),a("p",[t._v("平衡二叉查找树的概念经常运用在 Set、Map 中。")]),t._v(" "),a("blockquote",[a("p",[t._v("比如 Java 语言中："),a("br"),t._v("\nTreeSet 底层使用 TreeMap 实现，而 TreeMap 底层使用红黑树实现。")]),t._v(" "),a("p",[t._v("HashSet 底层使用 HashMap 实现，而 HashMap 底层实现了链表+红黑树实现。")])]),t._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://leetcode-cn.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣 "),a("OutboundLink")],1)])]),t._v(" "),a("blockquote",[a("p",[t._v("更多相关专栏内容汇总：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://gourderwa.blog.csdn.net/article/details/104020339",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 核心知识-专栏文章目录汇总 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103594468",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 并发编程-专栏文章目录汇总 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103828570",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java JVM（JDK13）-专栏文章目录汇总 "),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/104368031",target:"_blank",rel:"noopener noreferrer"}},[t._v("数据结构与算法-专栏文章目录汇总 "),a("OutboundLink")],1)])])]),t._v(" "),a("div",{attrs:{align:"center"}},[a("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/gourderwa.footer.jpeg"}})])])}),[],!1,null,null,null);s.default=i.exports}}]);